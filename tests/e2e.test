#! /usr/bin/env tclsh
# End-to-end tests for jsonwatch.
# ==============================================================================
# Copyright (c) 2020, 2023-2025 D. Bohdan and contributors listed in AUTHORS
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ==============================================================================

package require Tcl 8.6
package require Expect 5
package require tcltest 2

source [file dirname [info script]]/vendor/wapp/wapp.tcl

# Expect settings.
set max_match 100000
set timeout 5

# Our own settings.
set env_var JSONWATCH_COMMAND
set host 127.0.0.1
set port 8015


if {![info exists ::env($env_var)]} {
    puts stderr [list environment variable $env_var must be set]
    exit 2
}

set binary $::env($env_var)

if {![file exists $binary]} {
    puts stderr [list file $binary from environment variable $env_var doesn't exist]
    exit 2
}


# CLI smoke tests.

tcltest::test cli-1.1 {} -body {
    exec $binary -h
} -match regexp -result ***:(?i)usage


tcltest::test cli-1.2 {} -body {
    exec $binary --nonsense
} -returnCodes error -match glob -result *


tcltest::test cli-1.3 {} -body {
    exec $binary url http://example.com command false
} -returnCodes error -match glob -result *


# Shell completions.

tcltest::test cli-2.1 {init subcommand - bash} -body {
    exec $binary init bash
} -match glob -result *jsonwatch*


tcltest::test cli-2.2 {init subcommand - elvish} -body {
    exec $binary init elvish
} -match glob -result *jsonwatch*


tcltest::test cli-2.3 {init subcommand - fish} -body {
    exec $binary init fish
} -match glob -result *jsonwatch*


tcltest::test cli-2.4 {init subcommand - powershell} -body {
    exec $binary init powershell
} -match glob -result *jsonwatch*


tcltest::test cli-2.5 {init subcommand - zsh} -body {
    exec $binary init zsh
} -match glob -result *jsonwatch*


# Command tests.

tcltest::test command-1.1 {} -body {
    spawn $binary command cat tests/weather1.json
    expect {
        -regexp {"description":\s*"light shower sleet"} { return matched }
        timeout { return {timed out} }
    }
} -cleanup close -result matched


tcltest::test command-1.2 {} -setup {set timeout 2} -body {
    spawn $binary -n 1 --no-initial-values command cat tests/weather1.json
    expect {
        -regexp {[A-Za-z0-9]} { return text }
        timeout { return {timed out} }
    }
} -cleanup {close; set timeout 5} -result {timed out}


tcltest::test command-1.3 {} -body {
    set ch [file tempfile path]
    puts $ch {[1,2,3,4,5]}
    flush $ch

    spawn $binary -n 1 command sh -c "cat '$path'"
    expect {
        -glob *1*2*3*4*5* {}
        timeout { return {first timeout} }
    }

    seek $ch 0
    puts $ch {[1,2,3,4,5,6,7]}
    flush $ch

    expect \
        -glob *[clock format [clock seconds] -format %Y-%m]*6*7* {} \
        timeout { return {second timeout} } \

    close $ch

    lindex completed
} -cleanup {close; file delete $path} -result completed


### URL tests.

proc wapp-page-timestamp {} {
    wapp-mimetype application/json
    wapp-subst {{"timestamp": %string([clock seconds])}}
}


set count 0
proc wapp-page-alternate {} {
    wapp-mimetype application/json

    if {$::count % 2 == 1} {
        wapp {["foo", "baz"]}
    } else {
        wapp {["bar"]}
    }

    incr ::count
}


proc wapp-page-nested-obj {} {
    wapp-mimetype application/json

    if {$::count % 2 == 1} {
        wapp {{"k": "v"}}
    } else {
        wapp {{"k": {"nested": "v2"}}}
    }

    incr ::count
}


proc wapp-page-headers {} {
    wapp-mimetype application/json

    wapp [format \
        {{"X-Bar": "%s", "X-Foo": "%s"}} \
        [wapp-param .hdr:X-BAR] \
        [wapp-param .hdr:X-FOO] \
    ]
}


wapp-start [list -fromip 127.0.0.1 -nowait -server $port -trace]


tcltest::test url-1.1 {} -body {
    spawn $binary --interval 1 url http://$host:$port/timestamp
    set re {{\s*"timestamp":\s*\d+\s*}}
    expect \
        -regexp $re { lindex matched } \
        timeout { lindex {first timeout} } \
        ;

    set re2 [format {%1$s[\dT:+-]+ .timestamp: \d+ -> \d+} \
        [clock format [clock seconds] -format %Y-%m] \
    ]
    expect \
        -regexp $re2 { lindex matched } \
        timeout { lindex {second timeout} } \
        ;

} -cleanup close -result matched


tcltest::test url-1.2 {} -body {
    spawn $binary -n 1 --no-date url http://$host:$port/timestamp

    expect {
        -regexp {\n.timestamp: \d+ -> \d+} { lindex matched }
        timeout { lindex {timed out} }
    }
} -cleanup close -result matched


tcltest::test url-1.3 {} -body {
    spawn $binary -I -n 1 url http://$host:$port/alternate

    expect {
        -regexp {    ?\.0: "?bar"? -> "?foo"?\s+    ?\+ .1: "?baz"?} {
            lindex matched
        }
        timeout {
            lindex {timed out}
        }
    }
} -cleanup close -result matched


tcltest::test url-1.4 {} -body {
    spawn $binary -n 1 --no-initial-values url http://$host:$port/nested-obj

    expect {
        -regexp {    ?- \.k\.nested: "v2"\s+    \+ \.k: "v"} {
            lindex matched
        }
        timeout {
            lindex {timed out}
        }
    }
} -cleanup close -result matched


tcltest::test url-1.5 {} -body {
    spawn $binary \
        --interval 1 \
        url \
        -H {X-Foo: This is foo. } \
        --header X-Bar:this-is-bar \
        http://$host:$port/headers \
        ;

    expect {
        -regexp {this-is-bar.*This is foo\.\"} {
            lindex matched
        }
        timeout {
            lindex {timed out}
        }
    }
} -cleanup close -result matched


# Error handling.

set count_403 0
proc wapp-page-json-403-json {} {
    global count_403
    wapp-mimetype application/json

    if {$count_403 % 2 == 1} {
        wapp-reply-code {403 Forbidden}
        wapp Forbidden
    } else {
        wapp "{\"counter\": $count_403}"
    }

    incr count_403
}


set count_garbage 0
proc wapp-page-json-garbage-json {} {
    global count_garbage
    wapp-mimetype application/json

    if {$count_garbage % 2 == 1} {
        wapp {not json}
    } else {
        wapp "{\"counter\": $count_garbage}"
    }

    incr count_garbage
}


set count_blank 0
proc wapp-page-json-blank-json {} {
    global count_blank
    wapp-mimetype application/json

    if {$count_blank % 2 == 1} {
        wapp {}
    } else {
        wapp "{\"counter\": $count_blank}"
    }

    incr count_blank
}


tcltest::test error-1.1 {HTTP error} -setup {set timeout 5} -body {
    # JSON -> 403 -> JSON.
    # Should result in one change.
    spawn $binary -v -n 1 --no-initial-values url http://$host:$port/json-403-json

    expect {
        -glob {.counter: 0 -> 2} { return matched }
        timeout { return {timed out} }
    }
} -cleanup {close; set timeout 5} -result matched


tcltest::test error-1.2 {garbage JSON} -setup {set timeout 5} -body {
    # JSON -> garbage -> JSON.
    # Should result in one change.
    spawn $binary -v -n 1 --no-initial-values url http://$host:$port/json-garbage-json

    expect {
        -glob {.counter: 0 -> 2} { return matched }
        timeout { return {timed out} }
    }
} -cleanup {close; set timeout 5} -result matched


tcltest::test error-1.3 {blank response} -setup {set timeout 5} -body {
    # JSON -> blank -> JSON.
    # Should result in two changes.
    spawn $binary -v -n 1 --no-initial-values url http://$host:$port/json-blank-json

    expect {
        -glob {- .counter: 0} {}
        timeout { return {timed out} }
    }

    expect {
        -glob {+ .counter: 2} { return matched }
        timeout { return {timed out} }
    }
} -cleanup close -result matched


# Extra options.

tcltest::test changes-1.1 {} -body {
    spawn $binary -I -c 1 url http://$host:$port/timestamp

    expect \
        -glob {.timestamp: \d+ -> \d+} {} \
        timeout { return {change timeout} } \
        ;

    wait
} -cleanup {} -match regexp -result {\d+ [^ ]+ 0 0}


# Exit with a nonzero status if there are failed tests.
set failed [expr {$tcltest::numTests(Failed) > 0}]

tcltest::cleanupTests
if {$failed} {
    exit 1
}
